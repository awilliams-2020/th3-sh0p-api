// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"th3-sh0p-api/models"
)

// PostImagesHandlerFunc turns a function with the right signature into a post images handler
type PostImagesHandlerFunc func(PostImagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostImagesHandlerFunc) Handle(params PostImagesParams) middleware.Responder {
	return fn(params)
}

// PostImagesHandler interface for that can handle valid post images params
type PostImagesHandler interface {
	Handle(PostImagesParams) middleware.Responder
}

// NewPostImages creates a new http.Handler for the post images operation
func NewPostImages(ctx *middleware.Context, handler PostImagesHandler) *PostImages {
	return &PostImages{Context: ctx, Handler: handler}
}

/* PostImages swagger:route POST /images postImages

PostImages post images API

*/
type PostImages struct {
	Context *middleware.Context
	Handler PostImagesHandler
}

func (o *PostImages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostImagesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostImagesBody post images body
//
// swagger:model PostImagesBody
type PostImagesBody struct {

	// prompt
	Prompt string `json:"prompt,omitempty"`
}

// Validate validates this post images body
func (o *PostImagesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post images body based on context it is used
func (o *PostImagesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostImagesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostImagesBody) UnmarshalBinary(b []byte) error {
	var res PostImagesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostImagesOKBody post images o k body
//
// swagger:model PostImagesOKBody
type PostImagesOKBody struct {

	// image
	Image *models.Image `json:"image,omitempty"`
}

// Validate validates this post images o k body
func (o *PostImagesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostImagesOKBody) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(o.Image) { // not required
		return nil
	}

	if o.Image != nil {
		if err := o.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postImagesOK" + "." + "image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postImagesOK" + "." + "image")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post images o k body based on the context it is used
func (o *PostImagesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostImagesOKBody) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if o.Image != nil {
		if err := o.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postImagesOK" + "." + "image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postImagesOK" + "." + "image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostImagesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostImagesOKBody) UnmarshalBinary(b []byte) error {
	var res PostImagesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
