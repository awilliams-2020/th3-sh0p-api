// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetUserCreditHandlerFunc turns a function with the right signature into a get user credit handler
type GetUserCreditHandlerFunc func(GetUserCreditParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserCreditHandlerFunc) Handle(params GetUserCreditParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetUserCreditHandler interface for that can handle valid get user credit params
type GetUserCreditHandler interface {
	Handle(GetUserCreditParams, interface{}) middleware.Responder
}

// NewGetUserCredit creates a new http.Handler for the get user credit operation
func NewGetUserCredit(ctx *middleware.Context, handler GetUserCreditHandler) *GetUserCredit {
	return &GetUserCredit{Context: ctx, Handler: handler}
}

/* GetUserCredit swagger:route GET /user-credit getUserCredit

GetUserCredit get user credit API

*/
type GetUserCredit struct {
	Context *middleware.Context
	Handler GetUserCreditHandler
}

func (o *GetUserCredit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserCreditParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUserCreditOKBody get user credit o k body
//
// swagger:model GetUserCreditOKBody
type GetUserCreditOKBody struct {

	// image credit
	ImageCredit int64 `json:"imageCredit,omitempty"`
}

// Validate validates this get user credit o k body
func (o *GetUserCreditOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get user credit o k body based on context it is used
func (o *GetUserCreditOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetUserCreditOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserCreditOKBody) UnmarshalBinary(b []byte) error {
	var res GetUserCreditOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
