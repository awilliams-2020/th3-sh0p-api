// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"th3-sh0p-api/models"
)

// PostImageHandlerFunc turns a function with the right signature into a post image handler
type PostImageHandlerFunc func(PostImageParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostImageHandlerFunc) Handle(params PostImageParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostImageHandler interface for that can handle valid post image params
type PostImageHandler interface {
	Handle(PostImageParams, interface{}) middleware.Responder
}

// NewPostImage creates a new http.Handler for the post image operation
func NewPostImage(ctx *middleware.Context, handler PostImageHandler) *PostImage {
	return &PostImage{Context: ctx, Handler: handler}
}

/* PostImage swagger:route POST /image postImage

PostImage post image API

*/
type PostImage struct {
	Context *middleware.Context
	Handler PostImageHandler
}

func (o *PostImage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostImageParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostImageBody post image body
//
// swagger:model PostImageBody
type PostImageBody struct {

	// prompt
	// Required: true
	Prompt *string `json:"prompt"`
}

// Validate validates this post image body
func (o *PostImageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrompt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostImageBody) validatePrompt(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"prompt", "body", o.Prompt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post image body based on context it is used
func (o *PostImageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostImageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostImageBody) UnmarshalBinary(b []byte) error {
	var res PostImageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostImageOKBody post image o k body
//
// swagger:model PostImageOKBody
type PostImageOKBody struct {

	// image
	Image *models.Image `json:"image,omitempty"`

	// image credit
	ImageCredit int64 `json:"imageCredit,omitempty"`
}

// Validate validates this post image o k body
func (o *PostImageOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostImageOKBody) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(o.Image) { // not required
		return nil
	}

	if o.Image != nil {
		if err := o.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postImageOK" + "." + "image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postImageOK" + "." + "image")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post image o k body based on the context it is used
func (o *PostImageOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostImageOKBody) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if o.Image != nil {
		if err := o.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postImageOK" + "." + "image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postImageOK" + "." + "image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostImageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostImageOKBody) UnmarshalBinary(b []byte) error {
	var res PostImageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
