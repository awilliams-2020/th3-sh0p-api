// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API description in Markdown.",
    "title": "Th3-Sh0p API",
    "version": "1.0.0"
  },
  "host": "ai.th3-sh0p.com",
  "basePath": "/v1",
  "paths": {
    "/google-profile": {
      "get": {
        "parameters": [
          {
            "type": "string",
            "name": "accessToken",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Google profile info",
            "schema": {
              "type": "object",
              "properties": {
                "imageCredit": {
                  "type": "integer"
                },
                "profile": {
                  "$ref": "#/definitions/Profile"
                }
              }
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/image": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "description": "The image to create from text",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "prompt"
              ],
              "properties": {
                "prompt": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Images to show",
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "$ref": "#/definitions/Image"
                },
                "imageCredit": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "openAI returned a non 200"
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/image-pack": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "description": "The image pack to purchase",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "imagePack"
              ],
              "properties": {
                "imagePack": {
                  "type": "string",
                  "enum": [
                    "pack_1",
                    "pack_2",
                    "pack_3"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment intent",
            "schema": {
              "type": "object",
              "properties": {
                "paymentIntent": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "openAI returned a non 200"
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/images": {
      "get": {
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Images to show",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/images/pages": {
      "get": {
        "responses": {
          "200": {
            "description": "Number of images count",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/pub-key": {
      "get": {
        "responses": {
          "200": {
            "description": "Stripe publishable key",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user-credit": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User credit info",
            "schema": {
              "type": "object",
              "properties": {
                "imageCredit": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    }
  },
  "definitions": {
    "Image": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Profile": {
      "properties": {
        "email": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API description in Markdown.",
    "title": "Th3-Sh0p API",
    "version": "1.0.0"
  },
  "host": "ai.th3-sh0p.com",
  "basePath": "/v1",
  "paths": {
    "/google-profile": {
      "get": {
        "parameters": [
          {
            "type": "string",
            "name": "accessToken",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Google profile info",
            "schema": {
              "type": "object",
              "properties": {
                "imageCredit": {
                  "type": "integer"
                },
                "profile": {
                  "$ref": "#/definitions/Profile"
                }
              }
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/image": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "description": "The image to create from text",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "prompt"
              ],
              "properties": {
                "prompt": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Images to show",
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "$ref": "#/definitions/Image"
                },
                "imageCredit": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "openAI returned a non 200"
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/image-pack": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "description": "The image pack to purchase",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "imagePack"
              ],
              "properties": {
                "imagePack": {
                  "type": "string",
                  "enum": [
                    "pack_1",
                    "pack_2",
                    "pack_3"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment intent",
            "schema": {
              "type": "object",
              "properties": {
                "paymentIntent": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "openAI returned a non 200"
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/images": {
      "get": {
        "parameters": [
          {
            "type": "integer",
            "name": "page",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Images to show",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/images/pages": {
      "get": {
        "responses": {
          "200": {
            "description": "Number of images count",
            "schema": {
              "type": "integer"
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    },
    "/pub-key": {
      "get": {
        "responses": {
          "200": {
            "description": "Stripe publishable key",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user-credit": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User credit info",
            "schema": {
              "type": "object",
              "properties": {
                "imageCredit": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "description": "couldn't process request"
          }
        }
      }
    }
  },
  "definitions": {
    "Image": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Profile": {
      "properties": {
        "email": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
